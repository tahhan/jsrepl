(function() {
  JSREPL.prototype.Engines.prototype.Lisp.prototype.Library = '(defun caar (x) (car (car x)))\n(defun caar (x) (car (car x)))\n(defun cadr (x) (car (cdr x)))\n(defun cdar (x) (cdr (car x)))\n(defun cddr (x) (cdr (cdr x)))\n(defun caaar (x) (car (car (car x))))\n(defun caadr (x) (car (car (cdr x))))\n(defun cadar (x) (car (cdr (car x))))\n(defun caddr (x) (car (cdr (cdr x))))\n(defun cdaar (x) (cdr (car (car x))))\n(defun cdadr (x) (cdr (car (cdr x))))\n(defun cddar (x) (cdr (cdr (car x))))\n(defun cdddr (x) (cdr (cdr (cdr x))))\n(defun caaaar (x) (car (car (car (car x)))))\n(defun caaadr (x) (car (car (car (cdr x)))))\n(defun caadar (x) (car (car (cdr (car x)))))\n(defun caaddr (x) (car (car (cdr (cdr x)))))\n(defun cadaar (x) (car (cdr (car (car x)))))\n(defun cadadr (x) (car (cdr (car (cdr x)))))\n(defun caddar (x) (car (cdr (cdr (car x)))))\n(defun cadddr (x) (car (cdr (cdr (cdr x)))))\n(defun cdaaar (x) (cdr (car (car (car x)))))\n(defun cdaadr (x) (cdr (car (car (cdr x)))))\n(defun cdadar (x) (cdr (car (cdr (car x)))))\n(defun cdaddr (x) (cdr (car (cdr (cdr x)))))\n(defun cddaar (x) (cdr (cdr (car (car x)))))\n(defun cddadr (x) (cdr (cdr (car (cdr x)))))\n(defun cdddar (x) (cdr (cdr (cdr (car x)))))\n(defun cddddr (x) (cdr (cdr (cdr (cdr x)))))\n(def + plus)\n(def define def)\n(def #t \'t)\n(def #f Nil)\n(def nil Nil)\n(def - minus)\n(def / divide)\n(def % rem)\n(def * times)\n(def = equal)\n(def eq equal)\n(def head car)\n(def first car)\n(def tail cdr)\n(def rest cdr)\n(def eq equal)\n(defun null (x) (equal x Nil))\n(defun zerop (x) (equal x 0))\n(defun plusp (x) (> x 0))\n(defun minusp (x) (< x 0))\n(defun evenp (x) (equal (rem x 2) 0))\n(defun oddp (x) (/= (rem x 2) 1))\n(defun list-member (E L) (cond ((null L) Nil)\n                          ((equal E (first L))  \'t)\n                          (\'t (list-member E (rest L)))))\n(defun map (F L) (if (null L) Nil (cons (F (head L)) (map F (tail L)))))\n; TODO(amasad): Implement Math functions.';
}).call(this);
